import { AuthOptions } from 'next-auth';
import CredentialsProvider from 'next-auth/providers/credentials';
import { supabase } from './supabase';
import { createClient } from '@supabase/supabase-js';

export const authOptions: AuthOptions = {
  providers: [
    CredentialsProvider({
      name: 'Credentials',
      credentials: {
        document: { label: "Documento", type: "text" },
        password: { label: "Password", type: "password" }
      },
      async authorize(credentials) {
        // Log detallado para depuraci√≥n
        console.log('‚≠êÔ∏è Intento de autorizaci√≥n iniciado');
        
        if (!credentials?.document || !credentials?.password) {
          console.log('‚ùå Faltan credenciales');
          return null;
        }

        try {
          // Trim y normalizaci√≥n del documento
          const normalizedDocument = credentials.document.trim();
          console.log(`üîç Buscando usuario con documento: ${normalizedDocument}`);
          
          // OPCI√ìN 1: Buscar por documento
          console.log('üìä Consultando Supabase por documento...');
          const { data: userData, error: userError } = await supabase
            .from('users')
            .select('*') // Seleccionar todos los campos para depuraci√≥n
            .eq('document', normalizedDocument)
            .single();

          if (userError) {
            console.error('‚ùå Error al buscar por documento:', userError.message);
            // Continuar para intentar por email
          } else if (userData) {
            console.log('‚úÖ Usuario encontrado por documento');
            
            // Verificaci√≥n de contrase√±a
            console.log('üîê Verificando contrase√±a...');
            console.log('Contrase√±a proporcionada:', credentials.password);
            console.log('Contrase√±a almacenada (hash):', userData.password ? '[PRESENTE]' : '[AUSENTE]');
            
            if (userData.password === credentials.password) {
              console.log('‚úÖ Contrase√±a correcta, autenticaci√≥n exitosa');
              // Devolver el usuario para crear sesi√≥n
              return {
                id: userData.id,
                email: userData.email || 'no-email@example.com',
                name: userData.name || 'Usuario',
                role: userData.role || 'user',
                document: userData.document,
                image: userData.image || null
              };
            } else {
              console.log('‚ùå Contrase√±a incorrecta');
              return null;
            }
          } else {
            console.log('‚ùì Usuario no encontrado por documento, intentando con email');
          }
          
          // OPCI√ìN 2: Intentar buscar por correo electr√≥nico
          console.log('üìß Consultando Supabase por email...');
          const { data: emailUser, error: emailError } = await supabase
            .from('users')
            .select('*') // Seleccionar todos los campos para depuraci√≥n
            .eq('email', normalizedDocument)
            .single();
              
          if (emailError) {
            console.error('‚ùå Error al buscar por email:', emailError.message);
            return null;
          }
            
          if (!emailUser) {
            console.log('‚ùå Usuario no encontrado por ning√∫n m√©todo');
            return null;
          }
            
          console.log('‚úÖ Usuario encontrado por email');
          
          // Verificaci√≥n de contrase√±a
          console.log('üîê Verificando contrase√±a para usuario por email...');
          
          if (emailUser.password === credentials.password) {
            console.log('‚úÖ Contrase√±a correcta, autenticaci√≥n exitosa');
            return {
              id: emailUser.id,
              email: emailUser.email || 'no-email@example.com',
              name: emailUser.name || 'Usuario',
              role: emailUser.role || 'user',
              document: emailUser.document,
              image: emailUser.image || null
            };
          }
          
          console.log('‚ùå Contrase√±a incorrecta para usuario encontrado por email');
          return null;
          
        } catch (error) {
          console.error('‚ö†Ô∏è Error inesperado en el proceso de autenticaci√≥n:', error);
          return null;
        }
      }
    })
  ],
  session: {
    strategy: 'jwt',
    maxAge: 30 * 24 * 60 * 60, // 30 d√≠as
  },
  pages: {
    signIn: '/login',
    error: '/login',
  },
  callbacks: {
    async jwt({ token, user }) {
      if (user) {
        token.id = user.id;
        token.email = user.email;
        token.name = user.name;
        token.role = user.role;
        token.document = user.document;
        token.image = user.image;
      }
      return token;
    },
    async session({ session, token }) {
      if (session?.user) {
        session.user.id = token.id as string;
        session.user.role = token.role as string;
        session.user.document = token.document as string;
        session.user.image = token.image as string;
      }
      return session;
    }
  },
  debug: true // Habilitamos el modo debug para ver m√°s detalles
};