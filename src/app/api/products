import { NextApiRequest, NextApiResponse } from 'next';
import { supabase } from '@/lib/supabase';

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  const { method } = req;

  switch (method) {
    case 'GET':
      const { data: products, error: getError } = await supabase
        .from('products')
        .select('*');
      if (getError) return res.status(500).json({ error: getError.message });
      return res.status(200).json(products);

    case 'POST':
      const { name, sku, price, image, category, status } = req.body;
      const { data: newProduct, error: postError } = await supabase
        .from('products')
        .insert([{ name, sku, price, image, category, status }]);
      if (postError) return res.status(500).json({ error: postError.message });
      return res.status(201).json(newProduct);

    case 'PUT':
      const { id, ...updates } = req.body;
      const { data: updatedProduct, error: putError } = await supabase
        .from('products')
        .update(updates)
        .eq('id', id);
      if (putError) return res.status(500).json({ error: putError.message });
      return res.status(200).json(updatedProduct);

    case 'DELETE':
      const { id: deleteId } = req.body;
      const { data: deletedProduct, error: deleteError } = await supabase
        .from('products')
        .delete()
        .eq('id', deleteId);
      if (deleteError) return res.status(500).json({ error: deleteError.message });
      return res.status(204).json(deletedProduct);

    default:
      res.setHeader('Allow', ['GET', 'POST', 'PUT', 'DELETE']);
      return res.status(405).end(`Method ${method} Not Allowed`);
  }
}