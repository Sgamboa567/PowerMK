// This file contains the API endpoints for client management, allowing retrieval and updates of client information.

import { NextApiRequest, NextApiResponse } from 'next';
import { supabase } from '@/lib/supabase';

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
    const { method } = req;

    switch (method) {
        case 'GET':
            const { data: clients, error } = await supabase
                .from('clients')
                .select('*');

            if (error) return res.status(400).json({ error: error.message });
            return res.status(200).json(clients);

        case 'POST':
            const { name, email, phone } = req.body;
            const { data: newClient, error: insertError } = await supabase
                .from('clients')
                .insert([{ name, email, phone }]);

            if (insertError) return res.status(400).json({ error: insertError.message });
            return res.status(201).json(newClient);

        case 'PUT':
            const { id, ...updates } = req.body;
            const { data: updatedClient, error: updateError } = await supabase
                .from('clients')
                .update(updates)
                .eq('id', id);

            if (updateError) return res.status(400).json({ error: updateError.message });
            return res.status(200).json(updatedClient);

        case 'DELETE':
            const { clientId } = req.body;
            const { error: deleteError } = await supabase
                .from('clients')
                .delete()
                .eq('id', clientId);

            if (deleteError) return res.status(400).json({ error: deleteError.message });
            return res.status(204).end();

        default:
            res.setHeader('Allow', ['GET', 'POST', 'PUT', 'DELETE']);
            return res.status(405).end(`Method ${method} Not Allowed`);
    }
}